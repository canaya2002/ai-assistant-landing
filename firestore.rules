rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // üîê FUNCIONES HELPER DE SEGURIDAD
    // ========================================
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isEmailVerified() {
      return request.auth.token.email_verified == true;
    }

    // ========================================
    // üí¨ CONVERSACIONES - NUEVA IMPLEMENTACI√ìN
    // ========================================
    match /conversations/{conversationId} {
      
      // ‚úÖ LECTURA: Solo el propietario puede leer sus conversaciones
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // ‚úÖ CREACI√ìN: Usuario autenticado puede crear conversaciones
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll([
                         'id', 'userId', 'title', 'messages', 
                         'messageCount', 'isArchived', 'tags'
                       ]) &&
                       // Validar l√≠mite de mensajes inicial
                       request.resource.data.messages.size() == 0 &&
                       request.resource.data.messageCount == 0;
      
      // ‚úÖ ACTUALIZACI√ìN: Solo el propietario puede actualizar
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid &&
                       // Validar l√≠mites de mensajes seg√∫n plan
                       (
                         // Plan FREE: m√°ximo 50 mensajes
                         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.plan == 'free' && 
                          request.resource.data.messages.size() <= 50) ||
                         // Plan PRO: m√°ximo 300 mensajes
                         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.plan == 'pro' && 
                          request.resource.data.messages.size() <= 300) ||
                         // Plan PRO MAX: m√°ximo 300 mensajes
                         (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.plan == 'pro_max' && 
                          request.resource.data.messages.size() <= 300)
                       ) &&
                       // No se puede cambiar el userId
                       request.resource.data.userId == resource.data.userId &&
                       // messageCount debe coincidir con el tama√±o del array
                       request.resource.data.messageCount == request.resource.data.messages.size();
      
      // ‚úÖ ELIMINACI√ìN: Solo el propietario puede eliminar
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }

    // ========================================
    // üë§ USUARIOS
    // ========================================
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       request.resource.data.keys().hasAll(['email', 'name', 'plan']);
      
      allow update: if isAuthenticated() && request.auth.uid == userId;
      
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // ========================================
    // üìä USAGE (Uso de recursos)
    // ========================================
    match /usage/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if false; // Solo Cloud Functions
    }

    // ========================================
    // üñºÔ∏è IMAGES
    // ========================================
    match /images/{imageId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }

    // ========================================
    // üé• VIDEOS
    // ========================================
    match /videos/{videoId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }

    // ========================================
    // üåê SEARCH USAGE
    // ========================================
    match /search_usage/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if false; // Solo Cloud Functions
    }

    // ========================================
    // üí≥ PAYMENTS
    // ========================================
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      allow write: if false; // Solo Cloud Functions y Stripe
    }

    // ========================================
    // üîî NOTIFICATIONS
    // ========================================
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       // Solo se puede actualizar el campo 'read'
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }

    // ========================================
    // üö® SECURITY LOGS
    // ========================================
    match /security_logs/{logId} {
      allow read, write: if false; // Solo Cloud Functions
    }

    // ========================================
    // üö´ DENEGAR TODO LO DEM√ÅS POR DEFECTO
    // ========================================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}