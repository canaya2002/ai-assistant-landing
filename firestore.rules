// firestore.rules - REGLAS DE SEGURIDAD ESTRICTAS PARA FIRESTORE
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // üîí FUNCIONES DE UTILIDAD PARA SEGURIDAD
    // ========================================
    
    // Verificar que el usuario est√° autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verificar que el usuario es el propietario del documento
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Verificar que el email est√° verificado
    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    // Verificar que el usuario tiene un plan espec√≠fico
    function hasPlan(plan) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.plan == plan;
    }
    
    // Verificar que el usuario tiene un plan premium
    function hasPremiumPlan() {
      return hasPlan('pro') || hasPlan('pro_max');
    }
    
    // Verificar que los datos son v√°lidos
    function isValidUserData(data) {
      return data.keys().hasAll(['uid', 'email', 'name', 'plan']) &&
             data.uid == request.auth.uid &&
             data.email == request.auth.token.email &&
             data.plan in ['free', 'pro', 'pro_max'] &&
             data.name is string &&
             data.name.size() >= 2 &&
             data.name.size() <= 100;
    }
    
    // Verificar que solo se modifican campos permitidos
    function onlyAllowedFieldsChanged(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
    
    // Verificar rate limiting b√°sico (m√°ximo 100 escrituras por minuto)
    function withinRateLimit() {
      return request.time > resource.data.lastWriteTime + duration.value(600, 'ms');
    }
    
    // ========================================
    // üë§ COLECCI√ìN USERS - REGLAS ESTRICTAS
    // ========================================
    match /users/{userId} {
      // ‚úÖ LECTURA: Solo el propietario puede leer sus datos
      allow read: if isOwner(userId);
      
      // ‚úÖ CREACI√ìN: Solo durante registro con datos v√°lidos
      allow create: if isOwner(userId) && 
                       isEmailVerified() &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.plan == 'free'; // Solo plan gratuito al crear
      
      // ‚úÖ ACTUALIZACI√ìN: Solo campos espec√≠ficos por el propietario
      allow update: if isOwner(userId) && 
                       withinRateLimit() &&
                       (
                         // Actualizaci√≥n de perfil b√°sico
                         onlyAllowedFieldsChanged(['name', 'lastLogin', 'updatedAt']) ||
                         
                         // Actualizaci√≥n de plan (solo por webhooks del servidor)
                         (request.auth.token.admin == true && 
                          onlyAllowedFieldsChanged(['plan', 'stripeCustomerId', 'stripeSubscriptionId', 
                                                   'subscriptionStatus', 'currentPeriodEnd', 'updatedAt']))
                       );
      
      // ‚ùå ELIMINACI√ìN: No permitida (solo por administradores)
      allow delete: if false;
    }
    
    // ========================================
    // üí¨ COLECCI√ìN CONVERSATIONS - ACCESO PERSONAL
    // ========================================
    match /conversations/{conversationId} {
      // ‚úÖ LECTURA/ESCRITURA: Solo el propietario
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
      
      // ‚úÖ CREACI√ìN: Con datos v√°lidos
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'title', 'createdAt']);
    }
    
    // ========================================
    // üìä COLECCIONES DE USO - SOLO LECTURA PARA USUARIOS
    // ========================================
    match /usage/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Solo Cloud Functions pueden escribir
    }
    
    match /image_usage/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Solo Cloud Functions pueden escribir
    }
    
    match /video_usage/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Solo Cloud Functions pueden escribir
    }
    
    match /search_usage/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Solo Cloud Functions pueden escribir
    }
    
    match /specialist_usage/{userId} {
      allow read: if isOwner(userId);
      allow write: if false; // Solo Cloud Functions pueden escribir
    }
    
    // ========================================
    // üé® IM√ÅGENES GENERADAS - ACCESO PERSONAL
    // ========================================
    match /generated_images/{imageId} {
      // ‚úÖ LECTURA: Solo el propietario
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // ‚úÖ CREACI√ìN: Solo usuarios premium con datos v√°lidos
      allow create: if isAuthenticated() && 
                       hasPremiumPlan() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'prompt', 'createdAt']);
      
      // ‚úÖ ACTUALIZACI√ìN: Solo metadatos espec√≠ficos
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       onlyAllowedFieldsChanged(['isFavorite', 'tags', 'updatedAt']);
      
      // ‚úÖ ELIMINACI√ìN: Solo el propietario
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }
    
    // ========================================
    // üé¨ VIDEOS GENERADOS - SOLO PLAN PRO MAX
    // ========================================
    match /generated_videos/{videoId} {
      // ‚úÖ LECTURA: Solo el propietario con plan Pro Max
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid &&
                     hasPlan('pro_max');
      
      // ‚úÖ CREACI√ìN: Solo Cloud Functions pueden crear
      allow create: if false;
      
      // ‚úÖ ACTUALIZACI√ìN: Solo metadatos espec√≠ficos por el propietario
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       hasPlan('pro_max') &&
                       onlyAllowedFieldsChanged(['isFavorite', 'tags', 'updatedAt']);
      
      // ‚úÖ ELIMINACI√ìN: Solo el propietario
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       hasPlan('pro_max');
    }
    
    // ========================================
    // üîê LOGS DE SEGURIDAD - SOLO LECTURA ADMINISTRATIVA
    // ========================================
    match /security_logs/{logId} {
      // ‚ùå Sin acceso para usuarios regulares
      allow read, write: if false;
    }
    
    match /video_access_logs/{logId} {
      // ‚ùå Sin acceso para usuarios regulares
      allow read, write: if false;
    }
    
    // ========================================
    // üìÅ ARCHIVOS SUBIDOS - ACCESO PERSONAL
    // ========================================
    match /uploaded_files/{fileId} {
      // ‚úÖ LECTURA: Solo el propietario
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // ‚úÖ CREACI√ìN: Con validaciones de tama√±o y tipo
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'fileName', 'fileSize', 'fileType', 'createdAt']) &&
                       // Validar tama√±o seg√∫n plan
                       ((hasPlan('free') && request.resource.data.fileSize <= 10485760) ||  // 10MB para free
                        (hasPlan('pro') && request.resource.data.fileSize <= 52428800) ||   // 50MB para pro
                        (hasPlan('pro_max') && request.resource.data.fileSize <= 104857600)); // 100MB para pro_max
      
      // ‚úÖ ELIMINACI√ìN: Solo el propietario
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }
    
    // ========================================
    // üí≥ DATOS DE FACTURACI√ìN - SOLO LECTURA PERSONAL
    // ========================================
    match /billing_data/{userId} {
      // ‚úÖ LECTURA: Solo el propietario puede ver sus datos de facturaci√≥n
      allow read: if isOwner(userId);
      
      // ‚ùå ESCRITURA: Solo webhooks del servidor pueden escribir
      allow write: if false;
    }
    
    // ========================================
    // üìà ANALYTICS Y M√âTRICAS - SIN ACCESO DIRECTO
    // ========================================
    match /analytics/{document=**} {
      allow read, write: if false; // Solo Cloud Functions
    }
    
    match /metrics/{document=**} {
      allow read, write: if false; // Solo Cloud Functions
    }
    
    // ========================================
    // üö® REPORTES DE ABUSO - SOLO ESCRITURA
    // ========================================
    match /abuse_reports/{reportId} {
      // ‚úÖ CREACI√ìN: Usuarios pueden reportar abuso
      allow create: if isAuthenticated() && 
                       isEmailVerified() &&
                       request.resource.data.keys().hasAll(['reporterId', 'type', 'description', 'createdAt']) &&
                       request.resource.data.reporterId == request.auth.uid;
      
      // ‚ùå LECTURA/ACTUALIZACI√ìN: Solo administradores
      allow read, update, delete: if false;
    }
    
    // ========================================
    // üí¨ CONVERSACIONES COMPARTIDAS - ACCESO ESPEC√çFICO
    // ========================================
    match /shared_conversations/{shareId} {
      // ‚úÖ LECTURA: Cualquiera con el enlace (p√∫blico)
      allow read: if resource.data.isPublic == true;
      
      // ‚úÖ CREACI√ìN: Solo el propietario original
      allow create: if isAuthenticated() && 
                       request.resource.data.originalUserId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['originalUserId', 'conversationId', 'isPublic', 'createdAt']);
      
      // ‚úÖ ACTUALIZACI√ìN: Solo el propietario original
      allow update: if isAuthenticated() && 
                       resource.data.originalUserId == request.auth.uid &&
                       onlyAllowedFieldsChanged(['isPublic', 'updatedAt']);
      
      // ‚úÖ ELIMINACI√ìN: Solo el propietario original
      allow delete: if isAuthenticated() && 
                       resource.data.originalUserId == request.auth.uid;
    }
    
    // ========================================
    // üîÑ WEBHOOKS LOG - SOLO SISTEMA
    // ========================================
    match /webhook_logs/{logId} {
      allow read, write: if false; // Solo Cloud Functions
    }
    
    // ========================================
    // ‚öôÔ∏è CONFIGURACI√ìN DEL SISTEMA - SOLO LECTURA
    // ========================================
    match /system_config/{configId} {
      // ‚úÖ LECTURA: Usuarios autenticados pueden ver configuraci√≥n p√∫blica
      allow read: if isAuthenticated() && resource.data.public == true;
      
      // ‚ùå ESCRITURA: Solo administradores
      allow write: if false;
    }
    
    // ========================================
    // üÜò SOPORTE Y TICKETS - ACCESO PERSONAL
    // ========================================
    match /support_tickets/{ticketId} {
      // ‚úÖ LECTURA: Solo el propietario del ticket
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // ‚úÖ CREACI√ìN: Usuarios verificados pueden crear tickets
      allow create: if isAuthenticated() && 
                       isEmailVerified() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'subject', 'description', 'priority', 'createdAt']);
      
      // ‚úÖ ACTUALIZACI√ìN: Solo campos espec√≠ficos
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       onlyAllowedFieldsChanged(['description', 'status', 'updatedAt']);
    }
    
    // ========================================
    // üìä FEEDBACK Y CALIFICACIONES - ACCESO PERSONAL
    // ========================================
    match /feedback/{feedbackId} {
      // ‚úÖ LECTURA: Solo el autor del feedback
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // ‚úÖ CREACI√ìN: Usuarios pueden crear feedback
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['userId', 'type', 'content', 'rating', 'createdAt']) &&
                       request.resource.data.rating is number &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5;
      
      // ‚ùå ACTUALIZACI√ìN/ELIMINACI√ìN: No permitida una vez creado
      allow update, delete: if false;
    }
    
    // ========================================
    // üö´ REGLA POR DEFECTO - DENEGAR TODO LO DEM√ÅS
    // ========================================
    
    // Cualquier otra colecci√≥n o documento no especificado se deniega por defecto
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// ========================================
// üìã NOTAS IMPORTANTES PARA IMPLEMENTACI√ìN
// ========================================

/*
INSTRUCCIONES PARA DESPLEGAR ESTAS REGLAS:

1. Guardar este archivo como 'firestore.rules' en la ra√≠z del proyecto

2. Desplegar con Firebase CLI:
   firebase deploy --only firestore:rules

3. Verificar en Firebase Console:
   - Ve a Firestore Database
   - Pesta√±a "Rules"
   - Confirmar que las reglas se aplicaron correctamente

4. Probar reglas con el simulador:
   - En Firebase Console > Firestore > Rules
   - Click "Playground" para probar diferentes escenarios

CARACTER√çSTICAS DE SEGURIDAD IMPLEMENTADAS:

‚úÖ Autenticaci√≥n obligatoria para la mayor√≠a de operaciones
‚úÖ Verificaci√≥n de email requerida para operaciones sensibles  
‚úÖ Validaci√≥n estricta de datos de entrada
‚úÖ L√≠mites de tama√±o de archivo seg√∫n plan
‚úÖ Rate limiting b√°sico para prevenir spam
‚úÖ Segregaci√≥n de datos por usuario
‚úÖ Protecci√≥n contra escalaci√≥n de privilegios
‚úÖ Logs de seguridad protegidos
‚úÖ Validaci√≥n de planes premium para funciones avanzadas
‚úÖ Prevenci√≥n de modificaci√≥n no autorizada de datos cr√≠ticos

TESTING RECOMENDADO:

1. Probar autenticaci√≥n: usuario no autenticado no puede acceder
2. Probar autorizaci√≥n: usuario A no puede ver datos de usuario B
3. Probar validaci√≥n: datos inv√°lidos son rechazados
4. Probar planes: funciones premium solo para planes correctos
5. Probar rate limiting: muchas escrituras consecutivas son bloqueadas

*/